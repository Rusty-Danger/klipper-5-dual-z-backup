[gcode_macro START_PRINT]
description: "Starts a print with adaptive mesh"
gcode:
    {% set nozzle_temp = params.NOZZLE_TEMP|default(150)|int %}
    {% set bed_temp = params.BED_TEMP|default(60)|int %}
    {% set x_min = params.X_MIN|float %}
    {% set y_min = params.Y_MIN|float %}
    {% set x_max = params.X_MAX|float %}
    {% set y_max = params.Y_MAX|float %}

    G90 ; absolute positioning
    M83 ; extruder relative mode

    # Set bed and nozzle temps
    M104 S{nozzle_temp} ; heat nozzle to idle temp
    M140 S{bed_temp}    ; heat bed

    # Wait for bed temp only
    M190 S{bed_temp}    ; wait for bed to stabilize

    # Home first before mesh or moves
    G28

    # Probe adaptive mesh area
    BED_MESH_CALIBRATE PROFILE=adaptive METHOD=automatic MESH_MIN={x_min},{y_min} MESH_MAX={x_max},{y_max}

    # Wait for nozzle temp now
    M109 S{nozzle_temp}

    # Move up and prepare to prime
    G1 Z10 F240
    G92 E0
    G1 X2.0 Y10 Z0.28 F3000
    G1 X2.0 Y140 E10 F1500
    G1 X2.3 Y140 F5000
    G92 E0
    G1 X2.3 Y10 E10 F1200
    G92 E0

[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-3 F300
    # Raise nozzle by 10mm
    G1 Z10 F3000
    G90
    # Disable steppers
    M84

[screws_tilt_adjust]
screw1: 145,175
screw1_name: left front screw
screw2: 0,145
screw2_name: right front screw
screw3: 0,0
screw3_name: right rear screw
screw4: 145, 0
screw4_name: left rear screw
speed: 100
screw_thread: CW-M4
horizontal_move_z: 10

[exclude_object]

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

[gcode_macro REBOOT]
gcode:
     FIRMWARE_RESTART

[gcode_macro BED_MESH]
description: "Homes and generates a new bed mesh"
gcode:
    G28
    BED_MESH_CALIBRATE
    
[gcode_macro PROBE_CAL]
description: "Homes, probes, sets Z offset, and generates new bed mesh"
gcode:
    G28                       # Home again after adjustment
    PROBE_CALIBRATE           # Start Z offset calibration

######################################################################
# Override M117 command with rawparams
######################################################################

# The macro below will override the default M117 command to echo the message.
#
# It uses the rawparams pseudo-variable that contains the full unparsed
# parameters that was passed to the M117 command.
#
# As this can include comments, we are trimming the text when a `;` or `#` is
# found, and escaping any existing `"`

[gcode_macro M117]
rename_existing: M117.1
gcode:
  {% if rawparams %}
    {% set escaped_msg = rawparams.split(';', 1)[0].split('\x23', 1)[0]|replace('"', '\\"') %}
    SET_DISPLAY_TEXT MSG="{escaped_msg}"
    RESPOND TYPE=command MSG="{escaped_msg}"
  {% else %}
    SET_DISPLAY_TEXT
  {% endif %}

